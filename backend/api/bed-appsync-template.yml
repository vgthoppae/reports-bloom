AWSTemplateFormatVersion: 2010-09-09

Description: >-
  TeamReports API Stack

Parameters:
  ApiName:
    Description: Name of the API
    Type: String
    Default: stage-tr-api

  ApiSchema:
    Description: Name of the API Schema
    Type: String
    Default: stage-tr-schema

  DataSourceName:
    Description: Name of the API DataSource
    Type: String
    Default: config-api-datasource

  SchemaLoc:
    Description: S3 location of the Api Schema
    Type: String
    Default: s3://codepipeline-us-east-1-sbabs-user/teamreports/dev/teamreportsapi-schema.graphql

  DynamoDBTableName:
    Description: Existing Dynamodb table Name
    Type: String
    Default: SimpleSingleTable

Resources:
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: API_KEY
      Name: !Ref ApiName
      Tags:
        - Key: Project
          Value: teamreports

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: !Ref SchemaLoc

  GraphQLDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Description: Data source for the config parameters
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref DynamoDBTableName
      Name: !Ref DataSourceName
      ServiceRoleArn: !GetAtt AppSyncDynamoDBServiceRole.Arn
      Type: AMAZON_DYNAMODB

  AppSyncDynamoDBServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        {
          'Version': '2012-10-17',
          'Statement':
            [
              {
                'Effect': 'Allow',
                'Principal': { 'Service': 'appsync.amazonaws.com' },
                'Action': 'sts:AssumeRole',
              },
            ],
        }
      Description: Allows Appsync to assume this role and perform CRUD operation on DynamoDB
      Policies:
        - PolicyName: DynamoDBCrudPolicy
          PolicyDocument:
            'Fn::Transform':
              Name: AWS::Include
              Parameters:
                Location: !Sub 's3://sbabs-shared-internal/DynamoDBCrudPolicy.json'
      RoleName: !Sub appsync-${ApiName}-DataSource-DynamoDBServiceRole
      Tags:
        - Key: Project
          Value: teamreports

  PutConfigItemResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt GraphQLDataSource.Name
      FieldName: 'putConfig(...): ConfigItem!'
      Kind: UNIT
      RequestMappingTemplate:
        { 'version': '2017-02-28', 'operation': 'PutItem', 'key': {
              ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
              'pk': $util.dynamodb.toDynamoDBJson($ctx.args.pk),
              'sk': $util.dynamodb.toDynamoDBJson($ctx.args.sk),
            }, 'attributeValues': { '$ctx.args.details.key': $util.dynamodb.toDynamoDBJson($ctx.args.details.desc) } }
      # RequestMappingTemplateS3Location: String
      ResponseMappingTemplate:
        #set( $configItem = {} )
        #set( $configItem.pk = $ctx.result.pk)
        #set( $configItem.sk = $ctx.result.sk)

        #set( $configItem.details = {} )

        #foreach( $key in $ctx.result.keySet() )
        #if ($key != 'pk' && $key != 'sk')
        #set($configItem.details.key = $key)
        #set($configItem.details.desc = $ctx.result[$key])
        #end
        #end

        $util.toJson($configItem)
      # ResponseMappingTemplateS3Location: String
      TypeName: String

Outputs:
  GraphQLApiUrl:
    Description: GraphQL Api URL
    Value: !GetAtt GraphQLApi.GraphQLUrl
